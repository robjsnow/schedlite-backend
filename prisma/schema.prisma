// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid())
  email                 String                 @unique
  password              String
  createdAt             DateTime               @default(now())
  slots                 CalendarSlot[]
  bookings              Booking[]
  availabilityRules     AvailabilityRule[]
  availabilityOverrides AvailabilityOverride[]
  SessionType           SessionType[]

  googleToken GoogleToken?
}

model GoogleToken {
  userId       String @id
  accessToken  String
  refreshToken String
  expiryDate   BigInt

  user User @relation(fields: [userId], references: [id])
}

model AvailabilityRule {
  id            String  @id @default(uuid())
  user          User    @relation(fields: [userId], references: [id])
  userId        String
  sessionTypeId String? // if null, rule applies globally; otherwise, only for that session type
  dayOfWeek     Int // 0 (Sunday) to 6 (Saturday)
  startTime     String // e.g., "08:00"
  endTime       String // e.g., "17:00"
}

model AvailabilityOverride {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  sessionTypeId String? // if null, override applies globally; otherwise, for that session type
  date          DateTime
  status        String // e.g., "unavailable" or "custom"
  startTime     String? // required if status is custom
  endTime       String? // required if status is custom
}

model CalendarSlot {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  startTime DateTime
  endTime   DateTime
  isBooked  Boolean  @default(false)
  booking   Booking? @relation("SlotBooking")
}

model SessionType {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  name      String
  duration  Int
  price     Int?
  createdAt DateTime  @default(now())
  bookings  Booking[]
}

model Booking {
  id            String       @id @default(uuid())
  slot          CalendarSlot @relation("SlotBooking", fields: [slotId], references: [id])
  slotId        String       @unique
  user          User?        @relation(fields: [userId], references: [id])
  userId        String?
  sessionType   SessionType  @relation(fields: [sessionTypeId], references: [id])
  sessionTypeId String
  name          String
  email         String
  createdAt     DateTime     @default(now())
  note          String?
  status        String       @default("confirmed")
}
